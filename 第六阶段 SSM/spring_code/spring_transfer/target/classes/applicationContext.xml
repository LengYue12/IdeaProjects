<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
       	http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
       	http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop.xsd
">

<!--    开启注解扫描，使注解生效-->
    <context:component-scan base-package="com.lagou"></context:component-scan>

<!--引入properties文件
        location：指定文件路径，要加上classpath:       在核心配置文件中引入其他配置文件前面都要加classpath:
-->
<context:property-placeholder location="classpath:jdbc.properties"/>

<!--配置DataSource 数据源对象-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
<!--        配置数据库信息-->
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

<!--    配置QueryRunner-->

<bean id="qr" class="org.apache.commons.dbutils.QueryRunner">
<!--    在构建QueryRunner时，要使用有参方式注入DataSource数据源对象-->
    <constructor-arg name="ds" ref="dataSource"></constructor-arg>
</bean>



<!--    借助Spring的AOP 优化转账案列，实现了业务代码和事务控制代码的分离，降低耦合度-->



<!--AOP配置编写时要

    确定切入点方法，通知类，通知方法

        在核心配置文件中借助标签进行切面配置
-->

<!--开启AOP的自动代理-->
<!--<aop:aspectj-autoproxy></aop:aspectj-autoproxy>-->


<!--   基于XML方式， 进行AOP配置-->
<!--    <aop:config>-->
<!--&lt;!&ndash;        1.配置切点表达式-->
<!--                expression="execution(* com.lagou.service.impl.AccountServiceImpl.*(..))"：切点表达式：-->
<!--                    execution(返回值类型 AccountServiceImpl类的全路径.方法名 )   任意名称的方法，任意参数类型，任意个数类型-->
<!--                        不管方法的参数类型是什么，参数个数有多少个，都进行通配-->
<!--&ndash;&gt;-->
<!--        <aop:pointcut id="myPointcut" expression="execution(* com.lagou.service.impl.AccountServiceImpl.*(..))"/>-->

<!--&lt;!&ndash;        2.切面配置-->
<!--                ref="transactionManager"：引用通知类-->
<!--&ndash;&gt;-->
<!--        <aop:aspect ref="transactionManager">-->
<!--&lt;!&ndash;            配置前置通知方法   开启事务     pointcut-ref="myPointcut"：引用配置的切点表达式&ndash;&gt;-->
<!--            <aop:before method="beginTransaction" pointcut-ref="myPointcut"/>-->
<!--&lt;!&ndash;            配置后值通知方法   提交事务&ndash;&gt;-->
<!--            <aop:after-returning method="commit" pointcut-ref="myPointcut"/>-->
<!--&lt;!&ndash;            配置异常通知      回滚事务&ndash;&gt;-->
<!--            <aop:after-throwing method="rollback" pointcut-ref="myPointcut"/>-->
<!--&lt;!&ndash;            配置最终通知      释放资源&ndash;&gt;-->
<!--            <aop:after method="release" pointcut-ref="myPointcut"/>-->
<!--        </aop:aspect>-->
<!--    </aop:config>-->





</beans>