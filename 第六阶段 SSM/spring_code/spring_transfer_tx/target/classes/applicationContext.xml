<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
       	http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
       	http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop.xsd
">

<!--    基于XML的声明式事务控制
            引入tx命名空间
            事务管理器通知配置
            事务管理器AOP配置
-->




<!--开启注解扫描
        因为当前在AccountDaoImpl和AccountServiceImpl 上都添加了对应的IOC注解
-->
    <context:component-scan base-package="com.lagou"/>

<!--    数据库的配置信息要抽取到properties文件中，所以要引入properties文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>


<!--    配置dataSource数据源对象-->
<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
    <property name="driverClassName" value="${jdbc.driverClassName}"/>
    <property name="url" value="${jdbc.url}"/>
    <property name="username" value="${jdbc.username}"/>
    <property name="password" value="${jdbc.password}"/>
</bean>

<!--    配置jdbcTemplate
            jdbcTemplate模板对象在创建时需要用到有参构造来创建
                也就是创建该对象时需要通过有参构造来注入DataSource对象
-->

<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
<!--    通过有参构造注入DataSource数据源对象-->
    <constructor-arg name="dataSource" ref="dataSource"/>
</bean>






<!--借助Spring的声明式事务完成对AccountServiceImpl 类里面的方法进行事务控制增强，实现事务代码和业务代码的解耦合-->

<!--    声明当前配置事务管理器对象-->
<!--这个事务管理器在进行事务控制时，主要要借助Connection来完成事务控制
    所以在创建该对象时，要注入数据源对象
-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
<!--通过set方式注入数据源对象-->
        <property name="dataSource" ref="dataSource"/>
    </bean>


    <!--    声明式事务控制： 要开启事务的注解支持-->
<!--    xml方式，事务注解驱动的配置-->
    <tx:annotation-driven/>


<!--    配置通知增强，事务通知的配置，在通知中指定了事务的相关属性
            transaction-manager="transactionManager"：指定事务管理器对象
-->

<!--    <tx:advice id="txAdvice" transaction-manager="transactionManager">-->
<!--&lt;!&ndash;        定义事务的一些属性  * 表示当前任意名称的方法都走默认配置。如事务隔离级别，事务传播行为都走默认值-->

<!--                Spring在使用transactionManager这个事务管理器进行事务控制时，就可以根据这些事务的属性配置来完成事务控制-->
<!--&ndash;&gt;-->
<!--        <tx:attributes>-->
<!--&lt;!&ndash;-->
<!--        name：切点方法名称-->
<!--        isolation：事务的隔离级别-->
<!--        propagation：事务的传播行为-->
<!--        read-only：是否只读-->
<!--        timeout：超时时间-->
<!--&ndash;&gt;-->
<!--            <tx:method name="transfer" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" timeout="-1"/>-->
<!--&lt;!&ndash;            **CRUD常用配置**&ndash;&gt;-->
<!--&lt;!&ndash;            当前在切点表达式中所能匹配到的方法，若是save开头的，事务传播行为就是REQUIRED。其他都走默认值&ndash;&gt;-->
<!--            <tx:method name="save*" propagation="REQUIRED"/>-->
<!--            <tx:method name="delete*" propagation="REQUIRED"/>-->
<!--            <tx:method name="update*" propagation="REQUIRED"/>-->
<!--&lt;!&ndash;            以find开头的方法，是要做查询的。read-only="true"：设置为只读的&ndash;&gt;-->
<!--            <tx:method name="find*" read-only="true"/>-->
<!--&lt;!&ndash;            别的方法都走默认配置&ndash;&gt;-->
<!--            <tx:method name="*"/>-->
<!--        </tx:attributes>-->

<!--    </tx:advice>-->



<!--&lt;!&ndash;完成事务aop织入的配置，也就是通知与切点的结合&ndash;&gt;-->

<!--&lt;!&ndash;    aop配置：配置切面&ndash;&gt;-->
<!--&lt;!&ndash;    普通的aop配置用到 aop:aspect 标签-->
<!--        声明式事务用到 aop:advisor 标签-->
<!--&ndash;&gt;-->

<!--    <aop:config>-->
<!--&lt;!&ndash;声明式事务配置时，配置切面的子标签是aop:advisor-->
<!--        advice-ref="txAdvice"：表示当前要用的通知-->
<!--            txAdvice：当前的事务管理器对象里的方法作为通知方法-->
<!--        pointcut="execution(* com.lagou.service.impl.AccountServiceImpl.*(..))"：-->
<!--            表示 通知为AccountServiceImpl中的任意参数类型，任意参数个数的方法 进行增强-->
<!--&ndash;&gt;-->
<!--        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.lagou.service.impl.AccountServiceImpl.*(..))"/>-->
<!--    </aop:config>-->





</beans>