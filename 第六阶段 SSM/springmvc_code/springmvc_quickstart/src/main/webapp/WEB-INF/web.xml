<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">


<!--    借助中文乱码过滤器 解决POST方式提交的中文乱码问题-->
<!--    配置中文乱码过滤器-->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
<!--        初始化参数，设置编码来解决中文乱码问题-->
        <init-param>
<!--            以UTF-8的形式进行编码-->
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
<!--        拦截所有请求，进行中文乱码过滤-->
        <url-pattern>/*</url-pattern>
    </filter-mapping>








<!--    配置springmvc的前端控制器：DispatcherServlet-->
    <servlet>
        <servlet-name>DispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
<!--     DispatcherServlet实例化后，在执行初始化方法时，就会去解析初始化参数，根据名称拿到配置文件路径，加载解析 spring-mvc.xml   -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
<!--        在应用启动时，就完成servlet的实例化及初始化操作
                配置load-on-startup 标签，那么在应用启动时，该servlet就会被实例化并且执行初始化方法，
                    获取到初始化参数，根据初始化参数得到配置文件路径，进行解析加载 spring-mvc.xml
-->
        <load-on-startup>2</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>DispatcherServlet</servlet-name>
<!--        /   会匹配到所有的访问路径，但是不会匹配到像*.jsp这样的方法url
                完全匹配，可以拦截到  /login  /add    /update 这样的路径
                /a.jsp      有后缀名的url不能拦截
-->

<!--        /和/*的区别
                / 可以匹配到所有的访问路径，但是不会匹配到 *.jsp 这样后缀名的url
                /* 所有url路径 都可以匹配到，不管有没有后缀名
    -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>



<!--    通过配置error-page 标签
            处理500状态码或404状态码的异常
-->

<!--    web的处理异常机制-->
<!--    处理404异常-->
    <error-page>
<!--    若异常状态码是404，跳转到404.jsp
    error-code：异常错误码
    location：配置位置    -->
        <error-code>404</error-code>
        <location>/404.jsp</location>
    </error-page>

<!--    若异常状态码是500，跳转到500.jsp-->
<!--    处理500异常-->
    <error-page>
        <error-code>500</error-code>
        <location>/500.jsp</location>
    </error-page>
</web-app>